Google Ads
          <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
          <script>
            (adsbygoogle = window.adsbygoogle || []).push({
              google_ad_client: "ca-pub-7456036738578622",
              enable_page_level_ads: true
            });
          </script>

Domain Verify (Pinterest?)
          <meta
            name="p:domain_verify"
            content="37e144fd0d41ecdc19a1a045a5261754"
          />

XML Feeds
    "gatsby-plugin-offline",
    {
      resolve: "gatsby-plugin-feed",
      options: {
        setup(ref) {
          const ret = ref.query.site.siteMetadata.rssMetadata;
          ret.allCockpitBlog = ref.query.allCockpitBlog;
          ret.generator = "Yessica Duque - Food styling and photography";
          return ret;
        },
        query: `
        {
          site {
            siteMetadata {
              rssMetadata {
                site_url
                feed_url
                title
                description
                image_url
                author
                copyright
              }
            }
          }
        }
      `,
        feeds: [
          {
            serialize(ctx) {
              const { rssMetadata } = ctx.query.site.siteMetadata;
              return ctx.query.allCockpitBlog.edges.map(edge => ({
                categories: edge.node.entry.tags,
                date: edge.node.properties._modified,
                title: edge.node.entry.title,
                description:
                  edge.node.childCockpitBlogExcerptTextNode.childMarkdownRemark
                    .excerpt,
                author: rssMetadata.author,
                url: rssMetadata.site_url + edge.node.fields.slug,
                guid: rssMetadata.site_url + edge.node.fields.slug,
                custom_elements: [
                  {
                    "content:encoded":
                      edge.node.childCockpitBlogContentTextNode
                        .childMarkdownRemark.html
                  }
                ]
              }));
            },
            query: `
                        {
                            allCockpitBlog(limit: 100, sort: {fields: [properties____modified], order: DESC}) {
                              edges {
                                node {
                                  host
                                  properties {
                                    title_slug
                                    _modified
                                  }
                                  childCockpitBlogExcerptTextNode {
                                    childMarkdownRemark {
                                      excerpt
                                      html
                                    }
                                  }
                                  childCockpitBlogContentTextNode {
                                    childMarkdownRemark {
                                      timeToRead
                                      html
                                    }
                                  }
                                  entry {
                                    title
                                    tags
                                  }
                                  fields {
                                    slug
                                  }
                                }
                              }
                            }
                          }                          `,
            output: config.siteRss
          }
        ]
      }
    }



Old SEO Component

class OldSeoComponent extends Component {
  render() {
    const { postNode, postPath, postSEO, ogImage } = this.props;
    let description;
    let image = ogImage;
    let postURL;
    let title;
    if (postSEO) {
      const postMeta = postNode.entry;
      ({ title } = postMeta);
      description = postMeta.description
        ? postMeta.description
        : postNode.entry.excerpt.markdown.childMarkdownRemark.excerpt;
      image = ogImage || postMeta.image.path;
      postURL = config.siteUrl + config.pathPrefix + postPath;
    } else {
      title = config.siteTitle;
      description = config.siteDescription;
      image = config.siteLogo;
    }
    const realPrefix = config.pathPrefix === "/" ? "" : config.pathPrefix;
    image = ogImage || config.siteUrl + realPrefix + image;
    const blogURL = config.siteUrl + config.pathPrefix;
    const schemaOrgJSONLD = [
      {
        "@context": "http://schema.org",
        "@type": "WebSite",
        url: blogURL,
        name: title,
        alternateName: config.siteTitleAlt ? config.siteTitleAlt : ""
      }
    ];
    if (postSEO) {
      schemaOrgJSONLD.push([
        {
          "@context": "http://schema.org",
          "@type": "BreadcrumbList",
          itemListElement: [
            {
              "@type": "ListItem",
              position: 1,
              item: {
                "@id": postURL,
                name: title,
                image
              }
            }
          ]
        },
        {
          "@context": "http://schema.org",
          "@type": "BlogPosting",
          url: blogURL,
          name: title,
          alternateName: config.siteTitleAlt ? config.siteTitleAlt : "",
          headline: title,
          image: {
            "@type": "ImageObject",
            url: image
          },
          description
        }
      ]);
    }
    return (
      <Helmet>
        {/* General tags */}
        <meta name="description" content={description} />
        <meta name="image" content={image} />

        {/* Schema.org tags */}
        <script type="application/ld+json">
          {JSON.stringify(schemaOrgJSONLD)}
        </script>

        {/* OpenGraph tags */}
        <meta property="og:url" content={postSEO ? postURL : blogURL} />
        {postSEO ? <meta property="og:type" content="article" /> : null}
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={image} />
        <meta
          property="fb:app_id"
          content={config.siteFBAppID ? config.siteFBAppID : ""}
        />

        {/* Twitter Card tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta
          name="twitter:creator"
          content={config.userTwitter ? config.userTwitter : ""}
        />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={image} />
      </Helmet>
    );
  }
}
